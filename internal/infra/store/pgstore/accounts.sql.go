// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (tax_id, name, monthly_income, annual_revenue, email, balance) 
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id
`

type CreateAccountParams struct {
	TaxID         string      `json:"tax_id"`
	Name          string      `json:"name"`
	MonthlyIncome pgtype.Int8 `json:"monthly_income"`
	AnnualRevenue pgtype.Int8 `json:"annual_revenue"`
	Email         string      `json:"email"`
	Balance       int64       `json:"balance"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.TaxID,
		arg.Name,
		arg.MonthlyIncome,
		arg.AnnualRevenue,
		arg.Email,
		arg.Balance,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, tax_id, name, monthly_income, annual_revenue, email, balance, created_at, updated_at FROM accounts 
WHERE id = $1
`

func (q *Queries) GetAccountById(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.TaxID,
		&i.Name,
		&i.MonthlyIncome,
		&i.AnnualRevenue,
		&i.Email,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
